# -*- coding: utf-8 -*-
"""Untitled40.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vjmswpjLzbKQqoI_JaNR0ty0hRhEgPQm
"""

from flask import Flask, request, jsonify
import jwt
import csv
from datetime import datetime, timedelta
import os

app = Flask(__name__)
REGULAR_USER_CSV_PATH = "/content/regularUser.csv"
ADMIN_USER_CSV_PATH = "/content/adminUser.csv"
def read_books(filename):
    with open(filename, "r") as file:
        reader = csv.reader(file)
        return [row[0] for row in reader]

if __name__ == "__main__":
    app.run(debug=True)

from flask import Flask, request, jsonify
import jwt
import csv
from datetime import datetime, timedelta

app = Flask(__name__)

USERS = {
    "admin": {"password": "admin123", "user_type": "admin"},
    "regular": {"password": "user123", "user_type": "regular"},
}


SECRET_KEY = "mysecretkey"

def read_books(filename):
    with open(filename, "r") as file:
        reader = csv.reader(file)
        return [row[0] for row in reader]


@app.route("/login", methods=["POST"])
def login():
    data = request.get_json()
    username = data.get("username")
    password = data.get("password")

    if username in USERS and USERS[username]["password"] == password:
        token = jwt.encode(
            {"user": username, "exp": datetime.utcnow() + timedelta(hours=1)},
            SECRET_KEY,
            algorithm="HS256",
        )
        return jsonify({"token": token})
    else:
        return jsonify({"message": "Invalid credentials"}), 401


@app.route("/home", methods=["GET"])
def home():
    token = request.headers.get("Authorization")
    try:
        decoded_token = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
        user_type = USERS.get(decoded_token["user"], {}).get("user_type")
        if user_type == "admin":
            books = read_books("adminUser.csv") + read_books("regularUser.csv")
        else:
            books = read_books("regularUser.csv")
        return jsonify({"books": books})
    except jwt.ExpiredSignatureError:
        return jsonify({"message": "Token has expired"}), 401